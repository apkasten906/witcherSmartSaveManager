feat: implement hybrid database architecture for enhanced save file metadata

✨ Major Features:
- Hybrid two-tier storage: file-based core + optional database enhancements
- Automated SQLite schema initialization with InitializeDatabaseAsync()
- Enhanced save file metadata with quest tracking capability
- Graceful degradation when database unavailable

🗃️ Database Architecture:
- SaveFileMetadata with foreign key relationships
- QuestInfo table for parsed quest states and progression
- CharacterVariables for character stats (ready for implementation)
- Comprehensive error handling and connection management

🧪 Testing Infrastructure:
- DatabaseIntegrationTests: 6/7 tests passing, core functionality validated
- ServiceIntegrationTests: 5/5 tests passing, complete hybrid coordination
- Isolated test databases with automated schema creation
- Comprehensive concurrency and error scenario coverage
- File extension alignment: All tests use correct .sav format per GameSaveExtensions

📊 UI Integration:
- Enhanced DataGrid columns: "Current Quest" and "Metadata Status"
- Database-powered save file information display
- Hybrid metadata indicators showing enhancement status

🔧 Technical Implementation:
- SaveFileMetadataService: Isolated database operations layer
- Async database operations with proper resource disposal
- Foreign key relationships and schema versioning
- Production-ready foundation for Witcher 2 save file parsing

🎯 Quality Assurance:
- 11/12 tests passing (1 intentionally deferred for save parsing phase)
- VS Code Test Explorer and CLI test runner alignment
- CI/CD quality gate validated
- File extension consistency between tests and service configuration

📝 Documentation:
- HYBRID-DATABASE-VALIDATION.md: Comprehensive test results and architecture validation
- Updated PROJECT-STRUCTURE.md with implementation status
- Database schema patterns documented for team collaboration

Ready for Witcher 2 save file content parsing implementation.

Closes #30
