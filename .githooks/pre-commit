#!/bin/sh
#
# Pre-commit hook that runs compilation and unit tests
# Prevents commits if compilation fails or tests fail
#

# Store the current directory
CURRENT_DIR=$(pwd)
echo "Running pre-commit hook to verify code quality..."

# Exit with non-zero status if any command fails
set -e

# Check branch naming convention
echo "Checking branch naming convention..."
BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)

# Allow special branches (main, dev, master, etc.) and emergency hotfix branches
if [[ "$BRANCH_NAME" =~ ^(main|dev|master|hotfix/.*)$ ]]; then
    echo "✅ Special branch '$BRANCH_NAME' - skipping naming convention check."
elif [[ "$BRANCH_NAME" =~ ^feat/[0-9]+-[a-zA-Z0-9-]+$ ]]; then
    # Extract issue number from branch name
    ISSUE_NUMBER=$(echo "$BRANCH_NAME" | grep -o '[0-9]\+' | head -1)
    echo "✅ Branch naming convention valid: '$BRANCH_NAME' (references issue #$ISSUE_NUMBER)"
else
    echo "❌ Commit failed: Branch name '$BRANCH_NAME' does not follow the required convention."
    echo "   Required format: feat/{issue-number}-{description}"
    echo "   Examples: feat/56-link-branch-to-issue, feat/123-add-new-feature"
    echo "   Special branches allowed: main, dev, master, hotfix/*"
    exit 1
fi

# Build the solution to ensure it compiles
echo "Building solution to verify compilation..."
dotnet build
if [ $? -ne 0 ]; then
    echo "❌ Commit failed: Code does not compile. Please fix the errors and try again."
    exit 1
fi
echo "✅ Compilation successful!"

# Run unit tests
echo "Running unit tests..."
dotnet test WitcherSmartSaveManagerTests/WitcherSmartSaveManager.Tests.csproj
if [ $? -ne 0 ]; then
    echo "❌ Commit failed: Unit tests failed. Please fix the failing tests and try again."
    exit 1
fi
echo "✅ All tests passed!"

# If we got here, everything succeeded
echo "✅ Pre-commit checks passed! Proceeding with commit."
exit 0
